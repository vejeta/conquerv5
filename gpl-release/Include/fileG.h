// SSPDX-License-Identifier: GPL-3.0-or-later
/*
 *   This file was automatically generated by version 1.5 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Tue Oct 20 18:11:54 1992
 */
#ifndef __CEXTRACT__
#if __STDC__
#define PL_(x) x
#else
#define PL_(x) ( )
#endif /* __STDC__ */

/*
 * Conquer - Classic Multi-Player Strategy Game
 *
 * Originally Copyright (C) 1987-1992 Ed Barlow <barlowedward@hotmail.com>
 * Originally Copyright (C) 1987-1992 Adam Bryant <adb@usa.com>
 * Copyright (C) 2025 Juan Manuel MÃ©ndez Rey <vejeta@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Relicensed to GPL v3+ with explicit permission from original authors.
 * For relicensing documentation, see RELICENSING-PERMISSIONS.md
 *
 * Note: This file was automatically generated by cextract.
 */

/* MAIN -- Interpret command line arguments and parse user input */
extern int main PL_(( int argc, char ** argv ));

/* armyG.c: This file contains routines allowing user manipulation of units */

/* AUNIT_NUMBERING -- Interface to the army unit autonumbering system */
extern int aunit_numbering PL_(( void ));

/* DISB_ARMY -- Get rid of an army unit */
extern void disb_army PL_(( ARMY_PTR a1_ptr ));

/* EXT_ARMYCMD -- Perform an extended army operation */
extern void ext_armycmd PL_(( int armie ));

/* SUPPLY_ARMY -- Attempt to set the supply value of an army unit */
extern int supply_army PL_(( ARMY_PTR a1_ptr, int level, int doquery ));

/* UNGROUP_SCOUTS -- Remove any scouts from a group and set to defend */
extern void ungroup_scouts PL_(( int grpnum ));

/* caravanG.c: This file contains routines for manipulation of caravan units */

/* CVN_REPAIR -- Attempt to repair a caravan */
extern void cvn_repair PL_(( CVN_PTR v1_ptr ));

/* CVN_TRANSPORT -- Load/Unload the given caravan unit */
extern void cvn_transport PL_(( CVN_PTR v1_ptr ));

/* DISB_CVN -- Destroy a caravan */
extern void disb_cvn PL_(( CVN_PTR v1_ptr ));

/* EXT_CVNCMD -- Perform an extended caravan operation */
extern void ext_cvncmd PL_(( int cvan ));

/* EXT_CVNINFO -- Provide extended information about the caravan */
extern void ext_cvninfo PL_(( CVN_PTR v1_ptr ));

/* SUPPLY_CVN -- Attempt to dole out supplies to the caravan unit */
extern int supply_cvn PL_(( CVN_PTR v1_ptr, int level, int doquery ));

/* customG.c: File to allow the writing of configuration files */

/* ALLKEYS_CHECK -- Check all of the key bindings at once */
extern int allkeys_check PL_(( void ));

/* ALLKEYS_INIT -- Initialize all of the key bindings at once */
extern void allkeys_init PL_(( void ));

/* WRITE_CUSTOM -- This function writes out the list of currently options */
extern int write_custom PL_(( char * fname ));

/* displayG.c: This file creates the map and sidebar displays for conquer */

/* ADJ_DISPLAY -- Select a different highlight or display mode */
extern int adj_display PL_(( void ));

/* CHANGE_VIEW -- Adjust the value of a display character interactively */
extern int change_view PL_(( void ));

/* CUSTOM_DISPLAY -- Allow interactive customization of the display */
extern int custom_display PL_(( void ));

/* GET_HD_INFO -- Get a highlight or display selection */
extern int get_hd_info PL_(( int hilitep ));

/* HL_ALL -- Change all of the highlights */
extern int hl_all PL_(( void ));

/* HL_CURRENT -- Change the current focus highlight */
extern int hl_current PL_(( void ));

/* HL_HORZ -- Change the horizontal highlighting */
extern int hl_horz PL_(( void ));

/* HL_ULLR -- Change upper left and lower right highlights */
extern int hl_ullr PL_(( void ));

/* HL_URLL -- Change the upper right and lower left highlights */
extern int hl_urll PL_(( void ));

/* HL_VERT -- Change the verticle highlighting */
extern int hl_vert PL_(( void ));

/* MAKEBOTTOM -- Place standard display at bottom of screen */
extern void makebottom PL_(( void ));

/* MAKEMAP -- Display the visible map to the screen */
extern void makemap PL_(( void ));

/* MAKESIDE -- Show information about sector along side of screen;
               alwayssee indicates that all info should be shown */
extern void makeside PL_(( int alwayssee, int moveind ));

/* RECENTER_SCREEN -- Recenter the current location into middle of screen */
extern int recenter_screen PL_(( void ));

/* SHIFT_FOCUS -- Shift the focus slot to the next position */
extern int shift_focus PL_(( void ));

/* SHIFT_RFOCUS -- Shift the focus slot to the next position */
extern int shift_rfocus PL_(( void ));

/* SIDE_TROOPS -- Display additional troops along edge */
extern int side_troops PL_(( int start_pos, int max_pos, int show_all ));

/* TOGGLE_INFOMODE -- toggle the information mode */
extern int toggle_infomode PL_(( void ));

/* TROOP_LISTING -- List all of the troops within the sector */
extern int troop_listing PL_(( void ));

/* ZOOM_IN -- Increase the detail of the map */
extern int zoom_in PL_(( void ));

/* ZOOM_OUT -- Make the range of sectors covered larger */
extern int zoom_out PL_(( void ));

/* emailG.c: Code for the mail editor for sending interactive messages */

/* ALIGN_EMAIL_KEYS -- Align all of the mail editor keys */
extern void align_email_keys PL_(( void ));

/* EMAIL_CLOSE -- Free allocated space and remove all set locks */
extern void email_close PL_(( void ));

/* EMAIL_INIT -- Initialize the bindings */
extern int email_init PL_(( void ));

/* EMAIL_PARSE -- Main interface for sending mail; message in cur_message */
extern void email_parse PL_(( void ));

/* enlistG.c: routines to create armies, navies, and caravans */

/* ENLIST -- Select whether to enlist armies, navies or caravans */
extern int enlist PL_(( void ));

/* hexmapG.c: This file contains the conquer map display routines */

/* CENTERMAP -- Relocated the current sector to the center of the screen */
extern void centermap PL_(( void ));

/* COFFMAP -- Check if the cursor is out of bounds */
extern void coffmap PL_(( void ));

/* GO_EAST -- Move east */
extern int go_east PL_(( void ));

/* GO_NE -- Move northeast */
extern int go_ne PL_(( void ));

/* GO_NORTH -- Move north */
extern int go_north PL_(( void ));

/* GO_NW -- Move northwest */
extern int go_nw PL_(( void ));

/* GO_SE -- Move southeast */
extern int go_se PL_(( void ));

/* GO_SOUTH -- Move south */
extern int go_south PL_(( void ));

/* GO_SW -- Move southwest */
extern int go_sw PL_(( void ));

/* GO_WEST -- Move west */
extern int go_west PL_(( void ));

/* HEX_INIT -- Initialize information for the hex-map display */
extern void hex_init PL_(( void ));

/* HEX_RECALC -- Recalculate the information for the hex-map */
extern void hex_recalc PL_(( void ));

/* MARK_SECTOR -- Store the current sector position */
extern int mark_sector PL_(( void ));

/* MAX_XCURS -- Determine the maximum xcurs value */
extern int max_xcurs PL_(( void ));

/* MAX_YCURS -- Determine the maximum ycurs value */
extern int max_ycurs PL_(( int xval ));

/* ON_SCREEN -- Is the sector on the display screen? */
extern int on_screen PL_(( int x, int y ));

/* PRINT_MAP -- Send a map to the standard output */
extern void print_map PL_(( int widemap ));

/* RECENTER_NTN -- Realign relative center at the current position */
extern int recenter_ntn PL_(( void ));

/* SCR_EAST -- Move east */
extern int scr_east PL_(( void ));

/* SCR_NE -- Move northeast */
extern int scr_ne PL_(( void ));

/* SCR_NORTH -- Move north */
extern int scr_north PL_(( void ));

/* SCR_NW -- Move northwest */
extern int scr_nw PL_(( void ));

/* SCR_SE -- Move southeast */
extern int scr_se PL_(( void ));

/* SCR_SOUTH -- Move south */
extern int scr_south PL_(( void ));

/* SCR_SW -- Move southwest */
extern int scr_sw PL_(( void ));

/* SCR_WEST -- Move west */
extern int scr_west PL_(( void ));

/* SEE_AROUND -- Simply show the surrounding sectors */
extern void see_around PL_(( int x, int y ));

/* SHOW_CURSOR -- Move the cursor to the proper position */
extern void show_cursor PL_(( void ));

/* SHOW_SECT -- Show the sector at the indicated position,
                a position of -1, -1 indicates to go to normal place */
extern void show_sect PL_(( int x, int y, int x_loc, int y_loc, int method ));

/* WHATCANSEE -- track visibility of map or screen*/
extern void whatcansee PL_(( void ));

/* ieditG.c: This file holds editing functions for information displays */

/* EDIT_INFO -- Allow the user to alter some of the information */
extern void edit_info PL_(( int line, int choice ));

/* GOD_ARMYEDIT -- Adjust an army in god mode */
extern void god_armyedit PL_(( int line, int choice, int armynum ));

/* GOD_CVNEDIT -- Adjust a caravan in god mode */
extern void god_cvnedit PL_(( int line, int cvnnum ));

/* GOD_NAVYEDIT -- Adjust a navy in god mode */
extern void god_navyedit PL_(( int line, int navynum ));

/* infoG.c: This file creates formatted displays of various information */

/* SHOW_CITY_INFO -- Filter to call the show_info routine */
extern int show_city_info PL_(( void ));

/* SHOW_INFO -- Page through information on a selected item */
extern int show_info PL_(( int inchoice ));

/* ioG.c: input and output routines for user interface */

/* COPYSCREEN -- display the copyright notice on the screen
 * THIS SUBROUTINE MAY NOT BE ALTERED, AND THE MESSAGE CONTAINED HEREIN
 * MUST BE SHOWN TO EACH AND EVERY PLAYER, EVERY TIME THEY LOG IN	*/
extern void copyscreen PL_(( void ));

/* CREATE_HELP -- Given the list of functions, and the list of key
                  bindings, build a help list of the functions. */
extern void create_help PL_(( char * title, KLIST_PTR kl_ptr, PARSE_PTR fnc_l, int lim ));

/* DUMP_NTN_INFO -- Dump out nation information in machine readable format */
extern void dump_ntn_info PL_(( void ));

/* ENTER_UNITTYPE -- Select a new army unit */
extern int enter_unittype PL_(( int style, char * prompt, char * emsg ));

/* GAUDY_LINEOUT -- Gaudily highlight the nation name
                    if found in output line*/
extern void gaudy_lineout PL_(( int loc, char * str ));

/* GET_ALTITUDE -- Enter in an altitude type */
extern int get_altitude PL_(( void ));

/* GET_COUNTRY -- Return an integer representation of a nation;
                  As a side effect 'ntn_tptr' is set properly.  */
extern int get_country PL_(( int allinp ));

/* GET_DESIGNATION -- Enter in a major designation */
extern int get_designation PL_(( void ));

/* GET_DIPLOMACY -- Read in the diplomacy status of the nation */
extern int get_diplomacy PL_(( int oldstatus, int othstatus ));

/* GET_DMODE -- Enter in a major designation */
extern DMODE_PTR get_dmode PL_(( char * prompt ));

/* GET_FUNC -- Obtain a bindable function */
extern FNCI get_func PL_(( KEYSYS_STRUCT key_info ));

/* GET_MINDESG -- Enter in a minor designation */
extern int get_mindesg PL_(( void ));

/* GET_MTRLS -- Select a single entry from the materials */
extern int get_mtrls PL_(( itemtype * m1_ptr ));

/* GET_TGCLASS -- Enter in a tradegood class */
extern int get_tgclass PL_(( void ));

/* GET_TRADEGOOD -- Enter in a tradegood */
extern int get_tradegood PL_(( void ));

/* GET_VEGETATION -- Enter in a vegetation type */
extern int get_vegetation PL_(( void ));

/* MOTD_DISPLAY -- Show the motd to the screen */
extern void motd_display PL_(( void ));

/* NORMAL_LINEOUT -- Just send the string out to the screen */
extern void normal_lineout PL_(( int loc, char * str ));

/* SHOW_SCORES -- List all of the nation scores to standard output */
extern void show_scores PL_(( void ));

/* SPAWN_OUT -- This routines allows the player to get a shell will still
                in the conquer interface */
extern int spawn_out PL_(( void ));

/* iodataG.c: interaction routines between conquer and the file system */

/* ARETHEYON -- returns TRUE if 'country' is logged on, else FALSE */
extern int aretheyon PL_(( void ));

/* BYE -- Clean up everything prior to exiting */
extern void bye PL_(( void ));

/* CLOSE_NTN -- unset and close up nation information */
extern void close_ntn PL_(( int ntnnum, char * realname ));

/* FILES_CHECK -- Periodically check if various files need accessing */
extern void files_check PL_(( void ));

/* GET_GOD -- Routine to query god as to what nation to become */
extern int get_god PL_(( int natn, int nobrowse ));

/* MAX_DESCRIPT -- The maximum number of descriptors available */
extern int max_descript PL_(( void ));

/* MBOX_CHECK -- Check if the mail needs reading */
extern void mbox_check PL_(( void ));

/* NEWS_CHECK -- Check if the news needs reading */
extern void news_check PL_(( void ));

/* OPEN_NTN -- initialize all nation information */
extern int open_ntn PL_(( int ntnnum ));

/* RESET_GOD -- Restore settings of god */
extern void reset_god PL_(( void ));

/* SAVE_GOD -- Go and get rid of god locks from his tramping around */
extern void save_god PL_(( void ));

/* STMAIL_INIT -- Initialize the system mail checking setup */
extern void stmail_init PL_(( void ));

/* SYSM_CHECK -- Check if the system mail needs reading */
extern void sysm_check PL_(( void ));

/* keybindG.c: routines designed for manipulation / verification of keybindings */

/* ALIGN_GLOBAL_KEYS -- Align all of the global keys */
extern void align_global_keys PL_(( void ));

/* BIND_KEYS -- Attach a key binding to the list */
extern void bind_keys PL_(( KLIST_PTR * klist_ptr, char * kstr, FNCI f_ptr ));

/* CHECK_KEYS -- Verify that the key bindings are set properly */
extern int check_keys PL_(( KLIST_PTR * l_of_keys, KEYSYS_STRUCT key_info ));

/* FIND_FUNC -- Return the pointer to the function information */
extern PARSE_PTR find_func PL_(( FNCI f_ptr, PARSE_PTR p_list, int maxnum ));

/* FIND_KEYS -- Locate a key binding from within the list */
extern KLIST_PTR find_keys PL_(( KLIST_PTR klist_ptr, char * kstr ));

/* FREE_KEYS -- Free up the memory of the key bindings */
extern void free_keys PL_(( KLIST_PTR * klist_ptr ));

/* FUNC_MATCH -- Return the matching function given the string name */
extern FNCI func_match PL_(( char * namestr, PARSE_PTR p_list, int maxnum ));

/* GET_KEYS -- Read in a list of keys to be bound */
extern int get_keys PL_(( char * pr_str, char * out_str ));

/* INIT_KEYS -- Initialize all of the key bindings */
extern void init_keys PL_(( KLIST_PTR * klist_ptr, KBIND_PTR kbind_list, int numbind ));

/* NUM_BINDINGS -- Report the the number of keys bound to a function */
extern int num_bindings PL_(( KLIST_PTR klist_ptr, FNCI f_ptr ));

/* PARSE -- interpret pending or upcoming keyboard input */
extern void parse PL_(( void ));

/* PARSE_KEYS -- Find a function from the given key list */
extern FNCI parse_keys PL_(( KLIST_PTR klist_ptr, int echo_key ));

/* RM_KEYS -- Remove a key from the list */
extern int rm_keys PL_(( KLIST_PTR * klist_ptr, char * kstr ));

/* SORT_KEYS -- Re-sort the entire key binding list */
extern void sort_keys PL_(( KLIST_PTR * klist_ptr ));

/* magicG.c: The display routines for magic powers and interface to spells */

/* ALIGN_MAGIC_KEYS -- Align all of the magic system keys */
extern void align_magic_keys PL_(( void ));

/* CAST_SPELLS -- Allow the nation to cast a spell from the unit */
extern int cast_spells PL_(( void ));

/* SHOW_MAGIC -- Display and adjust all of the magic powers for the nation */
extern int show_magic PL_(( void ));

/* mailG.c: routines to read and manipulate conquer mail messages */

/* ALIGN_READER_KEYS -- Align all of the mail reader keys */
extern void align_reader_keys PL_(( void ));

/* DO_EMAIL -- Send a normal mail message */
extern int do_email PL_(( void ));

/* RMAIL_CLOSE -- Store the mail messages and remove the lock */
extern void rmail_close PL_(( void ));

/* RMAIL_PARSE -- Peruse all of the mail for the user */
extern int rmail_parse PL_(( void ));

/* miscG.c: handle all of the main input and command parsing for conquer */

/* ARMY_REPORT -- Show the army information for the nation */
extern int army_report PL_(( void ));

/* CAMP_INFO -- display information about current data file */
extern int camp_info PL_(( void ));

/* CVN_REPORT -- Show the caravan information for the nation */
extern int cvn_report PL_(( void ));

/* DO_CJUMP -- Go to the capital of the nation */
extern int do_cjump PL_(( void ));

/* DO_DIPLOMACY -- Show the nation diplomacy screens */
extern int do_diplomacy PL_(( void ));

/* DO_HELP -- Provide the player with some documentation */
extern int do_help PL_(( void ));

/* DO_IGNORE -- Ignore the keystrokes */
extern int do_ignore PL_(( void ));

/* DO_MJUMP -- Go to the marked sector */
extern int do_mjump PL_(( void ));

/* DO_MOTDEDIT -- Try to edit the motd file */
extern int do_motdedit PL_(( void ));

/* DO_MOVEPEOP -- Relocate people from the current sector */
extern int do_movepeop PL_(( void ));

/* DO_NARMY -- Go to the next army in the nation */
extern int do_narmy PL_(( void ));

/* DO_NCVN -- Go to the next caravan in the nation */
extern int do_ncvn PL_(( void ));

/* DO_NNAVY -- Go to the next fleet in the nation */
extern int do_nnavy PL_(( void ));

/* DO_OPTIONS -- Select and adjust the global options */
extern int do_options PL_(( void ));

/* DO_PAPER -- Select a newspaper for reading */
extern int do_paper PL_(( void ));

/* DO_QUIT -- goodbye cruel world! */
extern int do_quit PL_(( void ));

/* DO_REFRESH -- Refresh the screen */
extern int do_refresh PL_(( void ));

/* DO_RELOGIN -- Attempt to login as another nation */
extern int do_relogin PL_(( void ));

/* DO_SARMY -- Go to a specified army */
extern int do_sarmy PL_(( void ));

/* DO_SCITY -- Go to the specified city */
extern int do_scity PL_(( void ));

/* DO_SCORE -- Show the score of the nations in the world */
extern int do_score PL_(( void ));

/* DO_SCVN -- Go to the specified caravan */
extern int do_scvn PL_(( void ));

/* DO_SJUMP -- Go to the specified sector */
extern int do_sjump PL_(( void ));

/* DO_SNAVY -- Go to a specified naval unit */
extern int do_snavy PL_(( void ));

/* DO_UNIMPLEMENTED -- Just indicate that this function is not yet done */
extern int do_unimplemented PL_(( void ));

/* GROUP_REPORT -- Show the army information for a particular sector */
extern int group_report PL_(( void ));

/* NAVY_REPORT -- Show the navy information for the nation */
extern int navy_report PL_(( void ));

/* OPTION_CMD -- Adjust some options */
extern void option_cmd PL_(( KEYSYS_STRUCT key_info, KLIST_PTR * list_of_keys ));

/* moveG.c: interactive routines for moving units and items */

/* ALIGN_MOVE_KEYS -- Align all of the movement keys */
extern void align_move_keys PL_(( void ));

/* MOVE_PARSE -- relocate a unit using an interface */
extern void move_parse PL_(( int type ));

/* MOVE_RELOCATE -- complete final placement */
extern void move_relocate PL_(( int type, int verbal ));

/* MOVE_SELECT -- Routine to determine if a caravan, army or navy is
                  being moved.                                       */
extern int move_select PL_(( void ));

/* MOVE_STVAL -- String representation of the movement cost */
extern void move_stval PL_(( char * out_str, int mval, int cmpct ));

/* navyG.c: This file contains routines allowing user manipulation of naval units */

/* DISB_NAVY -- Get rid of a naval unit */
extern void disb_navy PL_(( NAVY_PTR n1_ptr ));

/* EXT_NAVYCMD -- Perform an extended navy operation */
extern void ext_navycmd PL_(( int navie ));

/* EXT_NAVYINFO -- Provide extended information about the naval fleet */
extern void ext_navyinfo PL_(( NAVY_PTR n1_ptr ));

/* NAVY_REPAIR -- Attempt to repair a navy */
extern void navy_repair PL_(( NAVY_PTR n1_ptr ));

/* NAVY_TRANSPORT -- Load/Unload the given naval unit */
extern void navy_transport PL_(( NAVY_PTR n1_ptr ));

/* SUPPLY_NAVY -- Attempt to set the supply value of a navy unit */
extern int supply_navy PL_(( NAVY_PTR n1_ptr, int level, int doquery ));

/* ntninfoG.c: This file provides the nation information screen to the user */

/* ALIGN_NINFO_KEYS -- Align all of the nation information mode keys */
extern void align_ninfo_keys PL_(( void ));

/* NTN_INFO - this is the nation information screen routine */
extern int ntn_info PL_(( void ));

/* pagerG.c: file perusal program especially written for conquer */

/* PAGE_FILE -- Peruse the specified file, reading appropriately */
extern int page_file PL_(( char * fname, int news ));

/* regionG.c: This file holds all of the commands to operate over a supply region */

/* ADJUST_REGION -- Affect a change on a region */
extern void adjust_region PL_(( int x, int y ));

/* REGION_CMD -- Attempt to send commands to the current supply center */
extern int region_cmd PL_(( void ));

/* sectorG.c: User and god commands to allow manipulation of sectors */

/* CHANGE_DESG -- Adjust the major designation of a sector */
extern int change_desg PL_(( void ));

/* CONSTRUCT -- construct minor designations */
extern int construct PL_(( void ));

/* SECT_INFO -- Provide more detailed information on the current sector */
extern void sect_info PL_(( void ));

/* selectG.c: This file is used to allow quick retrieval of data */

/* EXT_CMD -- Perform an extend command on a selected unit */
extern int ext_cmd PL_(( void ));

/* GET_ARMYSELECT -- If current selection is an army return it */
extern ARMY_PTR get_armyselect PL_(( void ));

/* GET_CVNSELECT -- If current selection is a caravan return it */
extern CVN_PTR get_cvnselect PL_(( void ));

/* GET_NAVYSELECT -- If current selection is a navy return it */
extern NAVY_PTR get_navyselect PL_(( void ));

/* GOTO_ARMY -- set the current sector and selector to the desired army */
extern int goto_army PL_(( int idnum ));

/* GOTO_CITY -- set the current sector to the desired city */
extern void goto_city PL_(( CITY_PTR c1_ptr ));

/* GOTO_CVN -- set the current sector and selector to the desired caravan */
extern int goto_cvn PL_(( int idnum ));

/* GOTO_NAVY -- set the current sector and selector to the desired navy */
extern int goto_navy PL_(( int idnum ));

/* PICK_NEXT -- Select the unit one below the current unit */
extern int pick_next PL_(( void ));

/* PICK_PREVIOUS -- Select the unit one above the current unit */
extern int pick_previous PL_(( void ));

/* SET_ARMYSELECT -- Set the selection indicator to the desired army */
extern void set_armyselect PL_(( int idnum ));

/* SET_CVNSELECT -- Set the selection indicator to the desired caravan */
extern void set_cvnselect PL_(( int idnum ));

/* SET_NAVYSELECT -- Set the selection indicator to the desired navy */
extern void set_navyselect PL_(( int idnum ));

/* SET_SELECT -- Allow adjustment to the selector */
extern int set_select PL_(( int type, char * desc ));

/* TRANS_CMD -- Load or unload the currently selected caravan or navy */
extern int trans_cmd PL_(( void ));

/* xferG.c: mechanism to transfer items between storage sites */

/* ALIGN_XFER_KEYS -- Align all of the transfer mode keys */
extern void align_xfer_keys PL_(( void ));

/* CITY2XFER -- Copy a city structure into the indicated xfer slot */
extern void city2xfer PL_(( int slot, CITY_PTR c1_ptr ));

/* CVN2XFER -- Copy a carvan structure into the indicated xfer slot */
extern void cvn2xfer PL_(( int slot, CVN_PTR v1_ptr ));

/* NAVY2XFER -- Copy a navy structure into the indicated xfer slot */
extern void navy2xfer PL_(( int slot, NAVY_PTR n1_ptr ));

/* SCT2XFER -- Copy information about a sector into the current slot */
extern void sct2xfer PL_(( int slot, int xloc, int yloc ));

/* XFER2CITY -- Shift the results back into the city structure */
extern void xfer2city PL_(( int slot, CITY_PTR c1_ptr ));

/* XFER2CVN -- Finalize the changes made on the caravan baggage */
extern void xfer2cvn PL_(( int slot, CVN_PTR v1_ptr ));

/* XFER2NAVY -- Finalize the changes made on the commodity */
extern void xfer2navy PL_(( int slot, NAVY_PTR n1_ptr ));

/* XFER2SCT -- Return the transferred materials to the sector */
extern void xfer2sct PL_(( int slot, int xloc, int yloc ));

/* XFER_INIT -- Initialize the keybindings, if needed, and other things */
extern int xfer_init PL_(( void ));

/* XFER_MODE -- Interactively transfer items between two storage elements */
extern void xfer_mode PL_(( void ));

/* time_ckG.c: This file handles all of the time accessing checks for conquer */

/* INITIAL_CHECK -- Initial time/host check. */
extern int initial_check PL_(( void ));

/* INIT_TIME_CHECK -- Initialize time check stuff */
extern void init_time_check PL_(( void ));

#undef PL_
#endif /* __CEXTRACT__ */
