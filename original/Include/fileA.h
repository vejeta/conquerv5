/*
 *   This file was automatically generated by version 1.5 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Tue Oct 20 18:11:31 1992
 */
#ifndef __CEXTRACT__
#if __STDC__
#define PL_(x) x
#else
#define PL_(x) ( )
#endif /* __STDC__ */

/* mainA.c: conquer : Copyright (c) 1992 by Ed Barlow and Adam Bryant
 *
 * A good deal of time and effort has gone into the writing of this
 * code and it is our hope that you respect this.  We give permission
 * to alter the code, but not to redistribute modified versions of the
 * code without our explicit permission.  If you do modify the code,
 * please document the changes made, and send us a copy, so that all
 * people may have it.  The code, to the best of our knowledge, works
 * well, but there will probably always be a need for bug fixes and
 * improvements.  We disclaim any responsibility for the codes'
 * actions.  [Use at your own risk].  This notice is just our way of
 * saying, "Happy gaming!", while making an effort to not get sued in
 * the process.
 *                           Ed Barlow, Adam Bryant
 */

/* MAIN -- parse command line options and control program flow */
extern int main PL_(( int argc, char ** argv ));

/* adduserA.c: This file handles the customization of new conquer nations */

/* NEWLOGIN -- Create a new nation specification */
extern int newlogin PL_(( int makenpcs ));

/* READ_NPC -- Read in the specified number of nations */
extern void read_npc PL_(( int amount ));

/* WRITE_NPC -- Store the nation for npcs; FALSE for bad read */
extern int write_npc PL_(( void ));

/* combatA.c: Resolve conflicts and provide for general dismemberment */

/* COMBAT -- Controlling routine to handle the entire combat scheme */
extern void combat PL_(( void ));

/* COMBAT_ROLL -- generate a combat roll, between 0 and 100 */
extern int combat_roll PL_(( void ));

/* INIT_COMBAT_ROLL -- intialize the combat roll settings */
extern void init_combat_roll PL_(( void ));

/* configA.c: This file contains the routines necessary for world creation */

/* BLD_CONFIG -- Set the configurations of the world */
extern int bld_config PL_(( int buildit ));

/* MAKEWORLD -- This routine is the backbone for creation of the world
                The rflag indicates that a scenario should be read in. */
extern void makeworld PL_(( int rflag ));

/* ZEROWORLD -- Routine to initialize the entire world */
extern void zeroworld PL_(( void ));

/* createA.c: This routines in this file actually create the world */

/* CREATEWORLD -- This routine generates a new world */
extern void createworld PL_(( void ));

/* RAWMATERIALS -- Place the jewels, metals and tradegoods */
extern void rawmaterials PL_(( void ));

/* economyA.c: This file contains updating routines for world economics */

/* UPD_CONSUME -- Distribute goods as needed */
extern void upd_consume PL_(( void ));

/* UPD_PRODUCE -- Transfer produced goods to each central point */
extern void upd_produce PL_(( void ));

/* UPD_SECTORS -- Set sieges and other world sector statuses */
extern void upd_sectors PL_(( void ));

/* mailA.c: Functions for sending mail to nations during update */

/* MSG_CADJUST -- Adjust the header and target of the current message */
extern void msg_cadjust PL_(( int ntarget, char * nheader ));

/* MSG_CFINISH -- Deliver and then remove storage */
extern void msg_cfinish PL_(( int sendit ));

/* MSG_CINIT -- Start a multi-line to the current nation */
extern void msg_cinit PL_(( char * headstr ));

/* MSG_CMARK -- Provide space at the current position for later use */
extern void msg_cmark PL_(( void ));

/* MSG_CONQUER -- Add a line to the pending message */
extern void msg_conquer PL_(( char * str ));

/* MSG_CRETURN -- Now put the given string in the previously marked spot */
extern void msg_creturn PL_(( char * str ));

/* MSG_CSEND -- Send the pending message to the target nation */
extern void msg_csend PL_(( void ));

/* MSG_CUNMARK -- Now remove a mark from the list */
extern void msg_cunmark PL_(( void ));

/* MSG_GFINISH -- Close up shop and end the mail messages */
extern void msg_gfinish PL_(( void ));

/* MSG_GINIT -- Begin sending a group message */
extern void msg_ginit PL_(( char * str ));

/* MSG_GROUPED -- Append to the currently grouped message */
extern void msg_grouped PL_(( ntntype to, int xloc, int yloc, char * msgstr ));

/* SEND_SORTEDNEWS -- Send out all of the accumulated sorted news */
extern void send_sortednews PL_(( void ));

/* SORTED_NEWS -- Store a news item that will be sorted later */
extern void sorted_news PL_(( int cntry, char * line ));

/* miscA.c: This file contains miscellaneous subroutines for use in conqrun */

/* DICE_TESTER -- Simply provide a nice test routine for the dice */
extern void dice_tester PL_(( void ));

/* MARK_LEADERS -- Set has_seen list to indicate leader influence */
extern void mark_leaders PL_(( void ));

/* NTN_STATS -- Provide information summary for each nation */
extern void ntn_stats PL_(( NTN_PTR n1_ptr ));

/* RANDOM_NAME -- Generate a random name given the type */
extern void random_name PL_(( char * str, int race ));

/* SORT_NEWS -- Resort the newspaper file */
extern void sort_news PL_(( int newsturn ));

/* WORLD_STATS -- Display statistics on the world data */
extern void world_stats PL_(( void ));

/* monsterA.c: routines to perform the action of monster units and nations */

/* MONSTER_GROWTH -- Expand the military and the "treasures" */
extern void monster_growth PL_(( void ));

/* MONSTER_MOVE_ARMY -- Relocate current army unit one sector radius */
extern void monster_move_army PL_(( int vtype, int etype ));

/* UPD_LIZARDS -- Update the lizards */
extern void upd_lizards PL_(( void ));

/* UPD_NOMADS -- The nomadic tribes */
extern void upd_nomads PL_(( void ));

/* UPD_PIRATES -- The vile cutthroats and marauders */
extern void upd_pirates PL_(( void ));

/* UPD_SAVAGES -- Update the savages */
extern void upd_savages PL_(( void ));

/* moveA.c: Routines to perform the relocation of NPC units */

/* NPC_MOVEARMY -- Relocate an army unit one sector */
extern int npc_movearmy PL_(( int x, int y ));

/* npcA.c: routines to make a computer calculated update for a nation */

/* MOVE_FOR_NTN -- perform a turn of movement for the current nation */
extern void move_for_ntn PL_(( void ));

/* ROVE_ARMY -- Take the current army unit and have it rove about */
extern void rove_army PL_(( void ));

/* sectorA.c: file containing code specific to sector calculations for conqrun */

/* CAPTURE_LAND -- Transfer ownership and cause fleeing */
extern void capture_land PL_(( ntntype whom, int xloc, int yloc ));

/* CHANGE_REACH -- Adjust the given value */
extern void change_reach PL_(( int xloc, int yloc, int value ));

/* FLEE_PEOPLE -- Cause N people to run away and hide */
extern void flee_people PL_(( long amount, int xloc, int yloc ));

/* GET_REACH -- Is is within reach? */
extern int get_reach PL_(( int xloc, int yloc ));

/* MEN_TO_CAPTURE -- Returns number of men needed to take a sector */
extern long men_to_capture PL_(( int xloc, int yloc, ntntype by ));

/* SET_REACH -- Set the reach values around the given location */
extern void set_reach PL_(( int xloc, int yloc, int value ));

/* SET_RELOCATION -- Build reach settings for relocation */
extern void set_relocation PL_(( int xloc, int yloc ));

/* UPD_CAPTURE -- Compute change is ownership as well as sieges */
extern void upd_capture PL_(( void ));

/* updateA.c: routines for calculating the results of a world turn */

/* UPDATE -- Go through the entire updating routine list */
extern void update PL_(( void ));

/* UPD_MILITARY -- Call all of the appropriate army, navy, caravan routines */
extern void upd_military PL_(( int cntry ));

/* UPD_NATIONS -- Now update population and nation statistics */
extern void upd_nations PL_(( int which ));

#undef PL_
#endif /* __CEXTRACT__ */
